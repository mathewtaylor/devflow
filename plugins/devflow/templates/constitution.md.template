# Project Constitution

> **Purpose:** This document defines the unchanging principles and standards for this project. It serves as the "law book" that guides all technical decisions throughout development.

**Last Updated:** {{LAST_UPDATED}}

---

## 1. Project Overview

### What This Project Does
{{PROJECT_DESCRIPTION}}

### Target Users
{{TARGET_USERS}}

### Core Business Rules
{{BUSINESS_RULES}}

---

## 2. Technology Stack

### Programming Language
{{PROGRAMMING_LANGUAGE}}

### Framework
{{FRAMEWORK}}

### Database
{{DATABASE}}

### Additional Technologies
{{ADDITIONAL_TECH}}

---

## 3. Architecture Patterns

### Primary Architecture
{{ARCHITECTURE_PATTERN}}

**Rationale:** {{ARCHITECTURE_RATIONALE}}

### Key Architectural Principles
{{ARCHITECTURAL_PRINCIPLES}}

---

## 4. Coding Standards

### Style Guide
{{STYLE_GUIDE}}

### Linter
{{LINTER}}

### Formatter
{{FORMATTER}}

### Naming Conventions
{{NAMING_CONVENTIONS}}

### File Organization
{{FILE_ORGANIZATION}}

### Code Review Requirements
{{CODE_REVIEW_REQUIREMENTS}}

---

## 5. Testing Requirements

### Testing Approach
{{TESTING_APPROACH}}

### Unit Testing
- **Framework:** {{UNIT_TEST_FRAMEWORK}}
- **Coverage Requirement:** {{COVERAGE_REQUIREMENT}}
- **When to Write:** {{WHEN_TO_WRITE_UNIT_TESTS}}

### Integration Testing
- **Framework:** {{INTEGRATION_TEST_FRAMEWORK}}
- **Scope:** {{INTEGRATION_TEST_SCOPE}}

### End-to-End Testing
- **Framework:** {{E2E_TEST_FRAMEWORK}}
- **Coverage:** {{E2E_TEST_COVERAGE}}

### Test Organization
{{TEST_ORGANIZATION}}

---

## 6. Security Standards

### Authentication
{{AUTHENTICATION_STANDARD}}

### Authorization
{{AUTHORIZATION_STANDARD}}

### Data Protection
{{DATA_PROTECTION_STANDARD}}

### Security Best Practices
{{SECURITY_BEST_PRACTICES}}

### Vulnerability Scanning
{{VULNERABILITY_SCANNING}}

---

## 7. Performance Standards

### Performance Requirements
{{PERFORMANCE_REQUIREMENTS}}

### Optimization Guidelines
{{OPTIMIZATION_GUIDELINES}}

### Monitoring and Metrics
{{MONITORING_METRICS}}

---

## 8. Deployment Standards

### Deployment Strategy
{{DEPLOYMENT_STRATEGY}}

### CI/CD Pipeline
{{CICD_PIPELINE}}

### Environment Configuration
{{ENVIRONMENT_CONFIG}}

### Rollback Procedures
{{ROLLBACK_PROCEDURES}}

---

## 9. Documentation Standards

### Code Documentation
{{CODE_DOCUMENTATION_STANDARD}}

### API Documentation
{{API_DOCUMENTATION_STANDARD}}

### Architecture Documentation
{{ARCHITECTURE_DOCUMENTATION_STANDARD}}

---

## 10. Dependencies and Package Management

### Package Manager
{{PACKAGE_MANAGER}}

### Dependency Update Policy
{{DEPENDENCY_UPDATE_POLICY}}

### Allowed Licenses
{{ALLOWED_LICENSES}}

---

## 11. Error Handling and Logging

### Error Handling Strategy
{{ERROR_HANDLING_STRATEGY}}

### Logging Framework
{{LOGGING_FRAMEWORK}}

### Log Levels
{{LOG_LEVELS}}

### Error Reporting
{{ERROR_REPORTING}}

---

## 12. Version Control Standards

### Branch Strategy
{{BRANCH_STRATEGY}}

### Commit Message Format
{{COMMIT_MESSAGE_FORMAT}}

### Pull Request Requirements
{{PR_REQUIREMENTS}}

---

## 13. DevFlow Quality Gates

Configure automated quality checks during feature execution:

### Quality Gate Settings

```yaml
quality_gates:
  per_task_review: true       # Code review after each subtask implementation
  checkpoint_review: true     # Comprehensive review after phase completion
  testing: true               # Automated testing after each subtask
```

### Gate Descriptions

**Per-Task Review:**
- Runs after implementing each individual subtask
- Reviews: code quality, security, constitution compliance
- Model: Opus with extended thinking
- Scope: Narrow (single subtask changes)
- Blocks: Prevents proceeding until approved or max attempts reached

**Checkpoint Review:**
- Runs after completing all parent tasks in a phase section
- Reviews: integration, spec fulfillment, architecture, security, code quality
- Model: Opus with extended thinking
- Scope: Broad (entire phase with multiple parent tasks)
- **Iterative fixing:** Auto-fixes CRITICAL/HIGH issues, stops at MEDIUM/LOW
- **Severity-based:**
  - CRITICAL: Security vulnerabilities, data loss, breaking bugs (auto-fix)
  - HIGH: Spec violations, architecture breaks (auto-fix)
  - MEDIUM: Code quality, potential bugs (ask user)
  - LOW: Style, minor optimizations (ask user)
- **Max 5 review cycles** before user intervention
- **Context-aware:** Monitors tokens, compacts if needed

**Testing:**
- Runs after implementing each subtask
- Generates and validates unit/integration tests
- Validates coverage requirements
- Auto-fixes failures with retry logic

### Disabling Quality Gates

Set any gate to `false` to disable (not recommended):

```yaml
quality_gates:
  per_task_review: true
  checkpoint_review: false   # Disables checkpoint review - faster but may miss phase-level issues
  testing: true
```

---

## Notes

- **This document is the single source of truth** for project standards
- All agents and developers must follow these guidelines
- Changes to this document require team consensus
- Reference this document when making technical decisions

---

**Generated by DevFlow** | Last reviewed: {{LAST_REVIEWED}}
